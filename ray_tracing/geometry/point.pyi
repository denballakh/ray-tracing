from typing import Iterator

class Point:
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...

    def __init__(self, x: float, y: float) -> None: ...
    @classmethod
    def from_angle(cls, angle: float, magn: float = ...) -> Point: ...
    @classmethod
    def from_tuple(cls, tup: tuple[float, float]) -> Point: ...

    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __abs__(self) -> float: ...
    def __neg__(self) -> Point: ...
    def __pos__(self) -> Point: ...
    def __add__(self, other: Point) -> Point: ...
    def __sub__(self, other: Point) -> Point: ...
    def __mul__(self, other: float) -> Point: ...
    def __rmul__(self, other: float) -> Point: ...
    def __truediv__(self, other: float) -> Point: ...
    def __matmul__(self, other: Point) -> float: ...
    def __iter__(self) -> Iterator[float]: ...

    def repr(self) -> str: ...
    def str(self) -> str: ... # name shadowing!
    def hash(self) -> int: ...
    def eq(self, other: object) -> bool: ...
    def ne(self, other: object) -> bool: ...
    def bool(self) -> bool: ... # name shadowing!
    def neg(self) -> Point: ...
    def add(self, other: Point) -> Point: ...
    def sub(self, other: Point) -> Point: ...
    def mul(self, other: float) -> Point: ...
    def div(self, other: float) -> Point: ...
    def scalar(self, other: Point) -> float: ...

    def abs(self) -> float: ...
    def angle(self) -> float: ...
    def norm(self) -> Point: ...

    def angle_to(self, other: Point) -> float: ...
    def rotate(self, angle: float) -> Point: ...
    def dist(self, other: Point) -> float: ...
